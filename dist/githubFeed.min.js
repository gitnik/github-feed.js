function EventFactory(a, b) {
    this.eventData = a, this.config = b
}
function GithubFeed(a) {
    this._events = ["PushEvent", "CreateEvent", "IssueCommentEvent", "WatchEvent"];
    var b = this;
    this._config = {debug: !1, user: "gitnik", numberOfEvents: 5, container: "githubContainer", containerClasses: [], typeOfEvents: ["PushEvent", "CreateEvent", "IssueCommentEvent", "WatchEvent"], cache: 86400, cacheTime: function () {
        return b._config.debug ? 0 : b._config.cache
    }}, this._prepareConfig(a);
    var c = this._getFeed();
    c.then(function (a) {
        b._process(a)
    })
}
function Promise() {
    this._callbacks = []
}
function CreateEvent(a, b) {
    this.data = a, this.config = b
}
function IssueCommentEvent(a, b) {
    this.data = a, this.config = b
}
function PushEvent(a, b) {
    this.data = a, this.config = b
}
function WatchEvent(a, b) {
    this.data = a, this.config = b
}
function _formatTime(a) {
    var b = Date.now(), c = Date.parse(a), d = b - c, e = 6e4, f = 60 * e, g = 24 * f, h = 7 * g, i = 4.3 * h, j = 365 * g;
    return e > d ? Math.round(d / 1e3) + " seconds ago" : f > d ? Math.round(d / e) + " minutes ago" : g > d ? Math.round(d / f) + " hours ago" : i > d ? Math.round(d / g) + " days ago" : j > d ? Math.round(d / i) + " months ago" : Math.round(d / j) + " years ago"
}
function _getRef(a) {
    return a.split("/")[2]
}
function _getRepo(a, b) {
    return b.split("/")[0] == a ? b.split("/")[1] : b
}
function _getRepoUrl(a, b) {
    return b.split("/")[0] == a ? "https://github.com/" + a + "/" + b.split("/")[1] : "https://github.com/" + b
}
function _removeApiUrl(a) {
    return a.replace("https://api.github.com/repos/", "https://github.com/")
}
function _truncateMessage(a, b) {
    return a.length > b ? a.substring(0, b) + "..." : a
}
EventFactory.prototype.getTemplate = function () {
    var a = this._getEventDataByType(), b = document.createElement("div"), c = this._getTemplateHtmlFromLink(a.type);
    return b.id = a.type, b.className = this.config.containerClasses.join(" "), b.innerHTML = this._getCompiledTemplate(c, a), b
}, EventFactory.prototype._getTemplateHtmlFromLink = function (a) {
    var b = document.querySelector('link[rel="import"]'), c = b.import;
    return c.querySelector("#" + a + "-tmpl").innerHTML
}, EventFactory.prototype._getCompiledTemplate = function (a, b) {
    var c = new Function("obj", "var p=[];with(obj){p.push('" + a.replace(/[\r\t\n]/g, " ").split("{{").join("	").replace(/((^|}})[^\t]*)'/g, "$1\r").replace(/\t=(.*?)}}/g, "',$1,'").split("	").join("');").split("}}").join("p.push('").split("\r").join("\\'") + "');}return p.join('');");
    return c(b)
}, EventFactory.prototype._getEventDataByType = function () {
    var a = this.eventData.type, b = new window[a](this.eventData, this.config);
    return b.getData()
}, GithubFeed.prototype._prepareConfig = function (a) {
    for (var b in a)a.hasOwnProperty(b) && (this._config[b] = a[b])
}, GithubFeed.prototype._getFeed = function () {
    var a = this, b = new Promise;
    if (cacheFeed = this._feedInCache())return b.resolve(JSON.parse(cacheFeed)), b;
    var c = "https://api.github.com/users/" + this._config.user + "/events";
    return this._ajax(c, "json", function (c) {
        a._putFeedInCache(c), b.resolve(JSON.parse(c))
    }, function (b, c) {
        a._errorHandler(b, c)
    }), b
}, GithubFeed.prototype._feedInCache = function () {
    return void 0 == localStorage["feed_" + this._config.user] ? !1 : JSON.parse(localStorage["feed_" + this._config.user])[0].fetched_at + 1e3 * this._config.cacheTime() > Date.now() ? !1 : localStorage["feed_" + this._config.user]
}, GithubFeed.prototype._putFeedInCache = function (a) {
    var b = JSON.parse(a);
    b[0].fetched_at = Date.now(), localStorage["feed_" + this._config.user] = JSON.stringify(b)
}, GithubFeed.prototype._ajax = function (a, b, c, d) {
    var e = new XMLHttpRequest;
    e.overrideMimeType && e.overrideMimeType("text/" + b), e || this._errorHandler("Couldn't initiate XMLHttpRequest", "Error"), e.onreadystatechange = function () {
        4 == e.readyState && (200 == e.status ? c(e.responseText) : d("AJAX Request failed.", "Error " + e.status))
    }, e.open("GET", a, !0), e.send(null)
}, GithubFeed.prototype._process = function (a) {
    for (var b = 0, c = 0; c < a.length; ++c)if (-1 != this._events.indexOf(a[c].type) && -1 != this._config.typeOfEvents.toString().indexOf(a[c].type) && b < this._config.numberOfEvents) {
        var d = new EventFactory(a[c], this._config), e = d.getTemplate();
        document.getElementById(this._config.container).appendChild(e), ++b
    }
}, GithubFeed.prototype._errorHandler = function (a, b) {
    this._config.debug ? alert("errorMessage: " + a + "\nerrorThrown: " + b) : (console.log("errorMessage: " + a), console.log("errorThrown: " + b))
}, Promise.prototype.then = function (a, b) {
    var c;
    return this._isdone ? c = a.apply(b, this.result) : (c = new Promise, this._callbacks.push(function () {
        var d = a.apply(b, arguments);
        d && "function" == typeof d.then && d.then(c.resolve, c)
    })), c
}, Promise.prototype.resolve = function () {
    this.result = arguments, this._isdone = !0;
    for (var a = 0; a < this._callbacks.length; a++)this._callbacks[a].apply(null, arguments);
    this._callbacks = []
}, CreateEvent.prototype.getData = function () {
    var a = {};
    return a.type = this.data.type, a.date = _formatTime(this.data.created_at), a.user = this.data.actor.login, a.userUrl = "https://github.com/" + a.user, a.payloadRefType = this.data.payload.ref_type, a.repo = _getRepo(this.data.actor.login, this.data.repo.name), a.repoUrl = _getRepoUrl(this.data.actor.login, this.data.repo.name), a.branch = this.data.payload.ref, a.branchUrl = a.repoUrl + "/tree/" + a.branch, a
}, IssueCommentEvent.prototype.getData = function () {
    var a = {};
    return a.type = this.data.type, a.date = _formatTime(this.data.created_at), a.user = this.data.actor.login, a.userUrl = "https://github.com/" + a.user, a.issue = _getRepo(this.data.actor.login, this.data.repo.name) + "/#" + this.data.payload.issue.number, a.issueUrl = this.data.payload.issue.html_url, a.comment = _truncateMessage(this.data.payload.comment.body, this.config.maxMessageLength), a.commentUrl = this.data.payload.comment.html_url, a
}, PushEvent.prototype.getData = function () {
    var a = {};
    return a.type = this.data.type, a.date = _formatTime(this.data.created_at), a.user = this.data.actor.login, a.userUrl = "https://github.com/" + a.user, a.ref = _getRef(this.data.payload.ref), a.refUrl = "https://github.com/" + this.data.repo.name, a.repo = _getRepo(a.user, this.data.repo.name), a.repoUrl = _removeApiUrl(this.data.repo.url), a.commits = this.processCommits(), a
}, PushEvent.prototype.processCommits = function () {
    for (var a = "", b = 0; b < this.data.payload.commits.length; ++b)a += '<a href="' + _removeApiUrl(this.data.payload.commits[b].url) + '" id="commit" class="commit">', a += _truncateMessage(this.data.payload.commits[b].message, this.config.maxMessageLength), a += "</a><br>";
    return a
}, WatchEvent.prototype.getData = function () {
    var a = {};
    return a.type = this.data.type, a.date = _formatTime(this.data.created_at), a.user = this.data.actor.login, a.userUrl = "https://github.com/" + a.user, a.repo = this.data.repo.name, a.repoUrl = _removeApiUrl(this.data.repo.url), a
};
